
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000720  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080008cc  080008cc  000108cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800091c  0800091c  0001091c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000920  08000920  00010920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08000924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00000020  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000038  20000038  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   000018d5  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000061d  00000000  00000000  0002191d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000e0  00000000  00000000  00021f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000bcc  00000000  00000000  00022020  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000db4  00000000  00000000  00022bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000239a0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000300  00000000  00000000  00023a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  00023d20  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080008b0 	.word	0x080008b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	080008b0 	.word	0x080008b0

080001ec <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  *  Otherwise the interrupt table located in flash will be used.
  *  See also the <system_*.c> file and how the SystemInit() function updates 
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */
	SysTick_vidInit();
 80001f0:	f000 fae4 	bl	80007bc <SysTick_vidInit>
	/* GPIO Init */
	GPIO_vidInit();
 80001f4:	f000 f94a 	bl	800048c <GPIO_vidInit>


  /* Infinite loop */
	while(1)
	{
		GPIO_vidWriteChannel(GPIO_U8CHANNEL_109, GPIO_ChannelHigh);
 80001f8:	2101      	movs	r1, #1
 80001fa:	206d      	movs	r0, #109	; 0x6d
 80001fc:	f000 fa2a 	bl	8000654 <GPIO_vidWriteChannel>
		SysTick_vidDelay(1000);
 8000200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000204:	f000 fae4 	bl	80007d0 <SysTick_vidDelay>
		GPIO_vidWriteChannel(GPIO_U8CHANNEL_109, GPIO_ChannelLow);
 8000208:	2100      	movs	r1, #0
 800020a:	206d      	movs	r0, #109	; 0x6d
 800020c:	f000 fa22 	bl	8000654 <GPIO_vidWriteChannel>
		SysTick_vidDelay(1000);
 8000210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000214:	f000 fadc 	bl	80007d0 <SysTick_vidDelay>
		GPIO_vidWriteChannel(GPIO_U8CHANNEL_109, GPIO_ChannelHigh);
 8000218:	e7ee      	b.n	80001f8 <main+0xc>
 800021a:	0924      	.short	0x0924
 800021c:	00000800 	.word	0x00000800
 8000220:	00182000 	.word	0x00182000
 8000224:	00182000 	.word	0x00182000
 8000228:	00382000 	.word	0x00382000
 800022c:	00002000 	.word	0x00002000

08000230 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000234:	4a16      	ldr	r2, [pc, #88]	; (8000290 <SystemInit+0x60>)
 8000236:	4b16      	ldr	r3, [pc, #88]	; (8000290 <SystemInit+0x60>)
 8000238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800023c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000244:	4a13      	ldr	r2, [pc, #76]	; (8000294 <SystemInit+0x64>)
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <SystemInit+0x64>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000250:	4b10      	ldr	r3, [pc, #64]	; (8000294 <SystemInit+0x64>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000256:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <SystemInit+0x64>)
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <SystemInit+0x64>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000264:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <SystemInit+0x64>)
 8000268:	4a0b      	ldr	r2, [pc, #44]	; (8000298 <SystemInit+0x68>)
 800026a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800026c:	4a09      	ldr	r2, [pc, #36]	; (8000294 <SystemInit+0x64>)
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <SystemInit+0x64>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000276:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <SystemInit+0x64>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800027e:	f000 f889 	bl	8000394 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000282:	4b03      	ldr	r3, [pc, #12]	; (8000290 <SystemInit+0x60>)
 8000284:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000288:	609a      	str	r2, [r3, #8]
#endif
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	e000ed00 	.word	0xe000ed00
 8000294:	40023800 	.word	0x40023800
 8000298:	24003010 	.word	0x24003010

0800029c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800029c:	b480      	push	{r7}
 800029e:	b087      	sub	sp, #28
 80002a0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]
 80002aa:	2302      	movs	r3, #2
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
 80002b2:	2302      	movs	r3, #2
 80002b4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002b6:	4b32      	ldr	r3, [pc, #200]	; (8000380 <SystemCoreClockUpdate+0xe4>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f003 030c 	and.w	r3, r3, #12
 80002be:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80002c0:	693b      	ldr	r3, [r7, #16]
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d007      	beq.n	80002d6 <SystemCoreClockUpdate+0x3a>
 80002c6:	2b08      	cmp	r3, #8
 80002c8:	d009      	beq.n	80002de <SystemCoreClockUpdate+0x42>
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d13d      	bne.n	800034a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xe8>)
 80002d0:	4a2d      	ldr	r2, [pc, #180]	; (8000388 <SystemCoreClockUpdate+0xec>)
 80002d2:	601a      	str	r2, [r3, #0]
      break;
 80002d4:	e03d      	b.n	8000352 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80002d6:	4b2b      	ldr	r3, [pc, #172]	; (8000384 <SystemCoreClockUpdate+0xe8>)
 80002d8:	4a2c      	ldr	r2, [pc, #176]	; (800038c <SystemCoreClockUpdate+0xf0>)
 80002da:	601a      	str	r2, [r3, #0]
      break;
 80002dc:	e039      	b.n	8000352 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80002de:	4b28      	ldr	r3, [pc, #160]	; (8000380 <SystemCoreClockUpdate+0xe4>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	0d9b      	lsrs	r3, r3, #22
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80002ea:	4b25      	ldr	r3, [pc, #148]	; (8000380 <SystemCoreClockUpdate+0xe4>)
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002f2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d00c      	beq.n	8000314 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002fa:	4a24      	ldr	r2, [pc, #144]	; (800038c <SystemCoreClockUpdate+0xf0>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000302:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <SystemCoreClockUpdate+0xe4>)
 8000304:	6852      	ldr	r2, [r2, #4]
 8000306:	0992      	lsrs	r2, r2, #6
 8000308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800030c:	fb02 f303 	mul.w	r3, r2, r3
 8000310:	617b      	str	r3, [r7, #20]
 8000312:	e00b      	b.n	800032c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000314:	4a1c      	ldr	r2, [pc, #112]	; (8000388 <SystemCoreClockUpdate+0xec>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	fbb2 f3f3 	udiv	r3, r2, r3
 800031c:	4a18      	ldr	r2, [pc, #96]	; (8000380 <SystemCoreClockUpdate+0xe4>)
 800031e:	6852      	ldr	r2, [r2, #4]
 8000320:	0992      	lsrs	r2, r2, #6
 8000322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000326:	fb02 f303 	mul.w	r3, r2, r3
 800032a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <SystemCoreClockUpdate+0xe4>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	0c1b      	lsrs	r3, r3, #16
 8000332:	f003 0303 	and.w	r3, r3, #3
 8000336:	3301      	adds	r3, #1
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800033c:	697a      	ldr	r2, [r7, #20]
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	fbb2 f3f3 	udiv	r3, r2, r3
 8000344:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <SystemCoreClockUpdate+0xe8>)
 8000346:	6013      	str	r3, [r2, #0]
      break;
 8000348:	e003      	b.n	8000352 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <SystemCoreClockUpdate+0xe8>)
 800034c:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xec>)
 800034e:	601a      	str	r2, [r3, #0]
      break;
 8000350:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xe4>)
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	091b      	lsrs	r3, r3, #4
 8000358:	f003 030f 	and.w	r3, r3, #15
 800035c:	4a0c      	ldr	r2, [pc, #48]	; (8000390 <SystemCoreClockUpdate+0xf4>)
 800035e:	5cd3      	ldrb	r3, [r2, r3]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <SystemCoreClockUpdate+0xe8>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	fa22 f303 	lsr.w	r3, r2, r3
 800036e:	4a05      	ldr	r2, [pc, #20]	; (8000384 <SystemCoreClockUpdate+0xe8>)
 8000370:	6013      	str	r3, [r2, #0]
}
 8000372:	bf00      	nop
 8000374:	371c      	adds	r7, #28
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	20000004 	.word	0x20000004
 8000388:	00f42400 	.word	0x00f42400
 800038c:	0aba9500 	.word	0x0aba9500
 8000390:	20000008 	.word	0x20000008

08000394 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003a2:	4a36      	ldr	r2, [pc, #216]	; (800047c <SetSysClock+0xe8>)
 80003a4:	4b35      	ldr	r3, [pc, #212]	; (800047c <SetSysClock+0xe8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003ac:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003ae:	4b33      	ldr	r3, [pc, #204]	; (800047c <SetSysClock+0xe8>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003b6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3301      	adds	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d103      	bne.n	80003cc <SetSysClock+0x38>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80003ca:	d1f0      	bne.n	80003ae <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003cc:	4b2b      	ldr	r3, [pc, #172]	; (800047c <SetSysClock+0xe8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d002      	beq.n	80003de <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80003d8:	2301      	movs	r3, #1
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	e001      	b.n	80003e2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003de:	2300      	movs	r3, #0
 80003e0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d102      	bne.n	80003ee <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003e8:	4b24      	ldr	r3, [pc, #144]	; (800047c <SetSysClock+0xe8>)
 80003ea:	4a25      	ldr	r2, [pc, #148]	; (8000480 <SetSysClock+0xec>)
 80003ec:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003ee:	4a23      	ldr	r2, [pc, #140]	; (800047c <SetSysClock+0xe8>)
 80003f0:	4b22      	ldr	r3, [pc, #136]	; (800047c <SetSysClock+0xe8>)
 80003f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80003fa:	4a22      	ldr	r2, [pc, #136]	; (8000484 <SetSysClock+0xf0>)
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SetSysClock+0xf0>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000404:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000406:	4a1d      	ldr	r2, [pc, #116]	; (800047c <SetSysClock+0xe8>)
 8000408:	4b1c      	ldr	r3, [pc, #112]	; (800047c <SetSysClock+0xe8>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800040e:	4a1b      	ldr	r2, [pc, #108]	; (800047c <SetSysClock+0xe8>)
 8000410:	4b1a      	ldr	r3, [pc, #104]	; (800047c <SetSysClock+0xe8>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000418:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800041a:	4a18      	ldr	r2, [pc, #96]	; (800047c <SetSysClock+0xe8>)
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <SetSysClock+0xe8>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000424:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000426:	4a15      	ldr	r2, [pc, #84]	; (800047c <SetSysClock+0xe8>)
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <SetSysClock+0xe8>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000430:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000432:	bf00      	nop
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <SetSysClock+0xe8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f9      	beq.n	8000434 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <SetSysClock+0xf4>)
 8000442:	f240 7205 	movw	r2, #1797	; 0x705
 8000446:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000448:	4a0c      	ldr	r2, [pc, #48]	; (800047c <SetSysClock+0xe8>)
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <SetSysClock+0xe8>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	f023 0303 	bic.w	r3, r3, #3
 8000452:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000454:	4a09      	ldr	r2, [pc, #36]	; (800047c <SetSysClock+0xe8>)
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <SetSysClock+0xe8>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	f043 0302 	orr.w	r3, r3, #2
 800045e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000460:	bf00      	nop
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <SetSysClock+0xe8>)
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	f003 030c 	and.w	r3, r3, #12
 800046a:	2b08      	cmp	r3, #8
 800046c:	d1f9      	bne.n	8000462 <SetSysClock+0xce>
    {
    }
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40023800 	.word	0x40023800
 8000480:	07405a08 	.word	0x07405a08
 8000484:	40007000 	.word	0x40007000
 8000488:	40023c00 	.word	0x40023c00

0800048c <GPIO_vidInit>:
/****************************************************************************/
/* !Comment: Public APIs 													*/
/****************************************************************************/

FUNC(void, CODE_FLASH_CLASS)		GPIO_vidInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0



	/* !Comment: Temporary Configuration of Clock of Port G
	 * To be Generalized in later releases */
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000492:	4a6c      	ldr	r2, [pc, #432]	; (8000644 <GPIO_vidInit+0x1b8>)
 8000494:	4b6b      	ldr	r3, [pc, #428]	; (8000644 <GPIO_vidInit+0x1b8>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
	/* !Comment: Temporary Configuration for Port G
	 * To be Generalized in later releases */
	for(	u8LocalChannel = 0x60;
 800049e:	2360      	movs	r3, #96	; 0x60
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	e0c5      	b.n	8000630 <GPIO_vidInit+0x1a4>
			u8LocalChannel++)
	{
		/* !Pseudo: Prepare pin number and port number */
		/* !Comment: To add check for valid channel number and report errors
		 * in later releases */
		u8LocalPinNumber = u8LocalChannel % GPIO_U8NUM_PINS_PER_PORT;
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	f003 030f 	and.w	r3, r3, #15
 80004aa:	70fb      	strb	r3, [r7, #3]
		u8LocalPortNumber = u8LocalChannel / GPIO_U8NUM_PINS_PER_PORT;
 80004ac:	7bfb      	ldrb	r3, [r7, #15]
 80004ae:	091b      	lsrs	r3, r3, #4
 80004b0:	70bb      	strb	r3, [r7, #2]

		/* !Pseudo: Map configuration of the current channel */
		switch(u8LocalPortNumber)
 80004b2:	78bb      	ldrb	r3, [r7, #2]
 80004b4:	2b06      	cmp	r3, #6
 80004b6:	d000      	beq.n	80004ba <GPIO_vidInit+0x2e>
			pkastrCfg = &GPIO_akstreCfgPortG[0];
			break;
#endif
		default:
			/* !Comment: To report error in future releases */
			break;
 80004b8:	e004      	b.n	80004c4 <GPIO_vidInit+0x38>
			pstrGPIOx = GPIOG;
 80004ba:	4b63      	ldr	r3, [pc, #396]	; (8000648 <GPIO_vidInit+0x1bc>)
 80004bc:	60bb      	str	r3, [r7, #8]
			pkastrCfg = &GPIO_akstreCfgPortG[0];
 80004be:	4b63      	ldr	r3, [pc, #396]	; (800064c <GPIO_vidInit+0x1c0>)
 80004c0:	607b      	str	r3, [r7, #4]
			break;
 80004c2:	bf00      	nop
		}

		/* !Pseudo: Set Channel Direction */
		/* !Pseudo: Clear Direction Field */
		pstrGPIOx -> MODER &= ~(u32LOC_2BIT_FIELD << (2 * u8LocalPinNumber));
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	2103      	movs	r1, #3
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	43db      	mvns	r3, r3
 80004d4:	401a      	ands	r2, r3
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	601a      	str	r2, [r3, #0]
		/* !Pseudo: Set Channel Direction */
		pstrGPIOx -> MODER |= ( (pkastrCfg[u8LocalPinNumber].enuDirection) \
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	6819      	ldr	r1, [r3, #0]
 80004de:	78fa      	ldrb	r2, [r7, #3]
 80004e0:	4613      	mov	r3, r2
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	4413      	add	r3, r2
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
									<< (2 * u8LocalPinNumber) );
 80004ee:	78fb      	ldrb	r3, [r7, #3]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	fa02 f303 	lsl.w	r3, r2, r3
		pstrGPIOx -> MODER |= ( (pkastrCfg[u8LocalPinNumber].enuDirection) \
 80004f6:	ea41 0203 	orr.w	r2, r1, r3
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	601a      	str	r2, [r3, #0]

		/* !Comment: Mode Dependencies */
		if( GPIO_enuInput == (pkastrCfg[u8LocalPinNumber].enuDirection) )
 80004fe:	78fa      	ldrb	r2, [r7, #3]
 8000500:	4613      	mov	r3, r2
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d11d      	bne.n	800054c <GPIO_vidInit+0xc0>
		{
			/* !Comment: Input track */
			/* !Pseudo: Pull Resistance Configuration */
			pstrGPIOx -> PUPDR &= ~(u32LOC_2BIT_FIELD << (2 * u8LocalPinNumber));
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	68da      	ldr	r2, [r3, #12]
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	2103      	movs	r1, #3
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	401a      	ands	r2, r3
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	60da      	str	r2, [r3, #12]
			pstrGPIOx -> PUPDR |= ( (pkastrCfg[u8LocalPinNumber].enuPullResistance) \
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	68d9      	ldr	r1, [r3, #12]
 800052a:	78fa      	ldrb	r2, [r7, #3]
 800052c:	4613      	mov	r3, r2
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4413      	add	r3, r2
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4413      	add	r3, r2
 8000536:	78db      	ldrb	r3, [r3, #3]
 8000538:	461a      	mov	r2, r3
										<< (2 * u8LocalPinNumber) );
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
			pstrGPIOx -> PUPDR |= ( (pkastrCfg[u8LocalPinNumber].enuPullResistance) \
 8000542:	ea41 0203 	orr.w	r2, r1, r3
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	e06e      	b.n	800062a <GPIO_vidInit+0x19e>
		}
		else if( GPIO_enuGpOutput == (pkastrCfg[u8LocalPinNumber].enuDirection) || \
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d008      	beq.n	8000570 <GPIO_vidInit+0xe4>
				GPIO_enuAlterFunction == (pkastrCfg[u8LocalPinNumber].enuDirection))
 800055e:	78fa      	ldrb	r2, [r7, #3]
 8000560:	4613      	mov	r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
		else if( GPIO_enuGpOutput == (pkastrCfg[u8LocalPinNumber].enuDirection) || \
 800056c:	2b02      	cmp	r3, #2
 800056e:	d15c      	bne.n	800062a <GPIO_vidInit+0x19e>
		{
			/* !Comment: Input track */

			/* !Psuedo: Output Type Configuration */
			pstrGPIOx -> OTYPER &= ~(u32LOC_1BIT_FIELD << (u8LocalPinNumber));
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	685a      	ldr	r2, [r3, #4]
 8000574:	78fb      	ldrb	r3, [r7, #3]
 8000576:	2101      	movs	r1, #1
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	401a      	ands	r2, r3
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	605a      	str	r2, [r3, #4]
			pstrGPIOx -> OTYPER |= ((pkastrCfg[u8LocalPinNumber].enuOutputType)\
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	6859      	ldr	r1, [r3, #4]
 8000588:	78fa      	ldrb	r2, [r7, #3]
 800058a:	4613      	mov	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4413      	add	r3, r2
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	785b      	ldrb	r3, [r3, #1]
 8000596:	461a      	mov	r2, r3
										<< (u8LocalPinNumber));
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
			pstrGPIOx -> OTYPER |= ((pkastrCfg[u8LocalPinNumber].enuOutputType)\
 800059e:	ea41 0203 	orr.w	r2, r1, r3
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	605a      	str	r2, [r3, #4]

			/* !Comment: To refactor and add support of System Configuration,
			 * Compensation Cell in next release */
			/* !Pseudo: Check High Speed output */
			if( GPIO_enuHighSpeed == (pkastrCfg[u8LocalPinNumber].enuOutputSpeed) || \
 80005a6:	78fa      	ldrb	r2, [r7, #3]
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	789b      	ldrb	r3, [r3, #2]
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d008      	beq.n	80005ca <GPIO_vidInit+0x13e>
				GPIO_enuAlterFunction == (pkastrCfg[u8LocalPinNumber].enuOutputSpeed))
 80005b8:	78fa      	ldrb	r2, [r7, #3]
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	789b      	ldrb	r3, [r3, #2]
			if( GPIO_enuHighSpeed == (pkastrCfg[u8LocalPinNumber].enuOutputSpeed) || \
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d112      	bne.n	80005f0 <GPIO_vidInit+0x164>
			{
				/* 1 - Enable SysCfg */
				RCC -> AHB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80005ca:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <GPIO_vidInit+0x1b8>)
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <GPIO_vidInit+0x1b8>)
 80005ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d4:	6353      	str	r3, [r2, #52]	; 0x34
				/* 2 - Enable Compensation Cell */
				SYSCFG -> CMPCR |= SYSCFG_CMPCR_CMP_PD;
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <GPIO_vidInit+0x1c4>)
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <GPIO_vidInit+0x1c4>)
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6213      	str	r3, [r2, #32]
				/* 3 - Wait for compensation Cell to be ready */
				while( 0x00 == ((SYSCFG -> CMPCR) & SYSCFG_CMPCR_READY));
 80005e2:	bf00      	nop
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <GPIO_vidInit+0x1c4>)
 80005e6:	6a1b      	ldr	r3, [r3, #32]
 80005e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0f9      	beq.n	80005e4 <GPIO_vidInit+0x158>
			}

			/* !Pseudo: Output Speed Configuration */
			pstrGPIOx -> OSPEEDR &= ~(u32LOC_2BIT_FIELD << (2*u8LocalPinNumber));
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	689a      	ldr	r2, [r3, #8]
 80005f4:	78fb      	ldrb	r3, [r7, #3]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	2103      	movs	r1, #3
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	43db      	mvns	r3, r3
 8000600:	401a      	ands	r2, r3
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	609a      	str	r2, [r3, #8]
			pstrGPIOx -> OSPEEDR |= ( (pkastrCfg[u8LocalPinNumber].enuOutputSpeed) \
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	6899      	ldr	r1, [r3, #8]
 800060a:	78fa      	ldrb	r2, [r7, #3]
 800060c:	4613      	mov	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	461a      	mov	r2, r3
													<< (2 * u8LocalPinNumber) );
 800061a:	78fb      	ldrb	r3, [r7, #3]
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
			pstrGPIOx -> OSPEEDR |= ( (pkastrCfg[u8LocalPinNumber].enuOutputSpeed) \
 8000622:	ea41 0203 	orr.w	r2, r1, r3
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	609a      	str	r2, [r3, #8]
			u8LocalChannel++)
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	3301      	adds	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
	for(	u8LocalChannel = 0x60;
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b6e      	cmp	r3, #110	; 0x6e
 8000634:	f67f af36 	bls.w	80004a4 <GPIO_vidInit+0x18>


		/* !Pseudo: Alternate Function Configuration */

	}/* !Comment: End of for loop */
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	40023800 	.word	0x40023800
 8000648:	40021800 	.word	0x40021800
 800064c:	080008cc 	.word	0x080008cc
 8000650:	40013800 	.word	0x40013800

08000654 <GPIO_vidWriteChannel>:
/****************************************************************************/
FUNC(void, CODE_FLASH_CLASS)		GPIO_vidWriteChannel(
											VAR(uint8, AUTOMATIC) u8Channel,
							VAR(GPIO_tenuChannelState, AUTOMATIC) enuValue)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	71bb      	strb	r3, [r7, #6]


	/* !Pseudo: Prepare pin number and port number */
	/* !Comment: To add check for valid channel number and report errors
	 * in later releases */
	u8LocalPinNumber = u8Channel % GPIO_U8NUM_PINS_PER_PORT;
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	72fb      	strb	r3, [r7, #11]
	u8LocalPortNumber = u8Channel / GPIO_U8NUM_PINS_PER_PORT;
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	091b      	lsrs	r3, r3, #4
 8000670:	72bb      	strb	r3, [r7, #10]

	/* !Pseudo: Map configuration of the current channel */
	switch(u8LocalPortNumber)
 8000672:	7abb      	ldrb	r3, [r7, #10]
 8000674:	2b06      	cmp	r3, #6
 8000676:	d000      	beq.n	800067a <GPIO_vidWriteChannel+0x26>
		pstrGPIOx = GPIOG;
		break;
#endif
	default:
		/* !Comment: To report error in future releases */
		break;
 8000678:	e002      	b.n	8000680 <GPIO_vidWriteChannel+0x2c>
		pstrGPIOx = GPIOG;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <GPIO_vidWriteChannel+0x60>)
 800067c:	60fb      	str	r3, [r7, #12]
		break;
 800067e:	bf00      	nop
	}

	do{
	pstrGPIOx -> ODR &= ~(0x01 << u8LocalPinNumber);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	7afa      	ldrb	r2, [r7, #11]
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	43d2      	mvns	r2, r2
 800068e:	401a      	ands	r2, r3
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	615a      	str	r2, [r3, #20]
	pstrGPIOx -> ODR |= ( (uint32)enuValue << u8LocalPinNumber );
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	79b9      	ldrb	r1, [r7, #6]
 800069a:	7afb      	ldrb	r3, [r7, #11]
 800069c:	fa01 f303 	lsl.w	r3, r1, r3
 80006a0:	431a      	orrs	r2, r3
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	615a      	str	r2, [r3, #20]
	}while(0);
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40021800 	.word	0x40021800

080006b8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler+0x4>

080006d2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <BusFault_Handler+0x4>

080006d8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <UsageFault_Handler+0x4>

080006de <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
	SysTick_u32eCounter++;
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <SysTick_Handler+0x18>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a03      	ldr	r2, [pc, #12]	; (8000720 <SysTick_Handler+0x18>)
 8000714:	6013      	str	r3, [r2, #0]
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	20000034 	.word	0x20000034

08000724 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	da0b      	bge.n	8000750 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000738:	490d      	ldr	r1, [pc, #52]	; (8000770 <NVIC_SetPriority+0x4c>)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 030f 	and.w	r3, r3, #15
 8000740:	3b04      	subs	r3, #4
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800074e:	e009      	b.n	8000764 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000750:	4908      	ldr	r1, [pc, #32]	; (8000774 <NVIC_SetPriority+0x50>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	e000e100 	.word	0xe000e100

08000778 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000788:	d301      	bcc.n	800078e <SysTick_Config+0x16>
 800078a:	2301      	movs	r3, #1
 800078c:	e00f      	b.n	80007ae <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <SysTick_Config+0x40>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000796:	210f      	movs	r1, #15
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f7ff ffc2 	bl	8000724 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <SysTick_Config+0x40>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SysTick_Config+0x40>)
 80007a8:	2207      	movs	r2, #7
 80007aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	e000e010 	.word	0xe000e010

080007bc <SysTick_vidInit>:
volatile VAR(uint32, DATA_CLASS)	SysTick_u32eCounter = 0;



FUNC(void, CODE_FLASH_CLASS)		SysTick_vidInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	SysTick_Config(SysTick_U8PRESCALER);
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <SysTick_vidInit+0x10>)
 80007c2:	f7ff ffd9 	bl	8000778 <SysTick_Config>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	0002bf20 	.word	0x0002bf20

080007d0 <SysTick_vidDelay>:



FUNC(void, CODE_FLASH_CLASS)		SysTick_vidDelay(
											VAR(uint32,AUTOMATIC)	u32Delay)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	VAR(uint32, AUTOMARIC)	u32LocalCurrTick;
	u32LocalCurrTick = SysTick_u32GetCurrentTick();
 80007d8:	f000 f810 	bl	80007fc <SysTick_u32GetCurrentTick>
 80007dc:	60f8      	str	r0, [r7, #12]

	while( ( SysTick_u32eCounter - u32LocalCurrTick ) < (u32Delay));
 80007de:	bf00      	nop
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SysTick_vidDelay+0x28>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	1ad2      	subs	r2, r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d3f8      	bcc.n	80007e0 <SysTick_vidDelay+0x10>
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000034 	.word	0x20000034

080007fc <SysTick_u32GetCurrentTick>:



FUNC(uint32, CODE_FLASH_CLASS)	SysTick_u32GetCurrentTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	return (SysTick_u32eCounter);
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <SysTick_u32GetCurrentTick+0x14>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000034 	.word	0x20000034

08000814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800084c <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800081a:	e003      	b.n	8000824 <LoopCopyDataInit>

0800081c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800081e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000822:	3104      	adds	r1, #4

08000824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800082a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800082c:	d3f6      	bcc.n	800081c <CopyDataInit>
  ldr  r2, =_sbss
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000830:	e002      	b.n	8000838 <LoopFillZerobss>

08000832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000834:	f842 3b04 	str.w	r3, [r2], #4

08000838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800083a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800083c:	d3f9      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800083e:	f7ff fcf7 	bl	8000230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f000 f811 	bl	8000868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000846:	f7ff fcd1 	bl	80001ec <main>
  bx  lr    
 800084a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800084c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000850:	08000924 	.word	0x08000924
  ldr  r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000858:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 800085c:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000860:	20000038 	.word	0x20000038

08000864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC_IRQHandler>
	...

08000868 <__libc_init_array>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	4e0d      	ldr	r6, [pc, #52]	; (80008a0 <__libc_init_array+0x38>)
 800086c:	4c0d      	ldr	r4, [pc, #52]	; (80008a4 <__libc_init_array+0x3c>)
 800086e:	1ba4      	subs	r4, r4, r6
 8000870:	10a4      	asrs	r4, r4, #2
 8000872:	2500      	movs	r5, #0
 8000874:	42a5      	cmp	r5, r4
 8000876:	d109      	bne.n	800088c <__libc_init_array+0x24>
 8000878:	4e0b      	ldr	r6, [pc, #44]	; (80008a8 <__libc_init_array+0x40>)
 800087a:	4c0c      	ldr	r4, [pc, #48]	; (80008ac <__libc_init_array+0x44>)
 800087c:	f000 f81a 	bl	80008b4 <_init>
 8000880:	1ba4      	subs	r4, r4, r6
 8000882:	10a4      	asrs	r4, r4, #2
 8000884:	2500      	movs	r5, #0
 8000886:	42a5      	cmp	r5, r4
 8000888:	d105      	bne.n	8000896 <__libc_init_array+0x2e>
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000890:	4798      	blx	r3
 8000892:	3501      	adds	r5, #1
 8000894:	e7ee      	b.n	8000874 <__libc_init_array+0xc>
 8000896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800089a:	4798      	blx	r3
 800089c:	3501      	adds	r5, #1
 800089e:	e7f2      	b.n	8000886 <__libc_init_array+0x1e>
 80008a0:	0800091c 	.word	0x0800091c
 80008a4:	0800091c 	.word	0x0800091c
 80008a8:	0800091c 	.word	0x0800091c
 80008ac:	08000920 	.word	0x08000920

080008b0 <__EH_FRAME_BEGIN__>:
 80008b0:	00000000                                ....

080008b4 <_init>:
 80008b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b6:	bf00      	nop
 80008b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ba:	bc08      	pop	{r3}
 80008bc:	469e      	mov	lr, r3
 80008be:	4770      	bx	lr

080008c0 <_fini>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	bf00      	nop
 80008c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c6:	bc08      	pop	{r3}
 80008c8:	469e      	mov	lr, r3
 80008ca:	4770      	bx	lr
