
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000538  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000734  08000734  00010734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000738  08000738  00010738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  0800073c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00000020  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000038  20000038  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001453  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000050b  00000000  00000000  0002149b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000c0  00000000  00000000  000219a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000925  00000000  00000000  00021a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000ce0  00000000  00000000  0002238d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002306d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000002c0  00000000  00000000  000230ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  000233b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080006c8 	.word	0x080006c8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	080006c8 	.word	0x080006c8

080001ec <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  *  Otherwise the interrupt table located in flash will be used.
  *  See also the <system_*.c> file and how the SystemInit() function updates 
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */
	SysTick_vidInit();
 80001f0:	f000 f9f0 	bl	80005d4 <SysTick_vidInit>
	/* GPIO Init */
		gpio_init();
 80001f4:	f000 f81c 	bl	8000230 <gpio_init>


  /* Infinite loop */
	while(1)
	{
		GPIOG -> BSRRL |= (1 << 13) | (1 << 14);
 80001f8:	4a0c      	ldr	r2, [pc, #48]	; (800022c <main+0x40>)
 80001fa:	4b0c      	ldr	r3, [pc, #48]	; (800022c <main+0x40>)
 80001fc:	8b1b      	ldrh	r3, [r3, #24]
 80001fe:	b29b      	uxth	r3, r3
 8000200:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000204:	b29b      	uxth	r3, r3
 8000206:	8313      	strh	r3, [r2, #24]
		SysTick_vidDelay(1000);
 8000208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020c:	f000 f9ec 	bl	80005e8 <SysTick_vidDelay>
		GPIOG -> BSRRH |= (1 << 13) | (1 << 14);
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <main+0x40>)
 8000212:	4b06      	ldr	r3, [pc, #24]	; (800022c <main+0x40>)
 8000214:	8b5b      	ldrh	r3, [r3, #26]
 8000216:	b29b      	uxth	r3, r3
 8000218:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800021c:	b29b      	uxth	r3, r3
 800021e:	8353      	strh	r3, [r2, #26]
		SysTick_vidDelay(1000);
 8000220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000224:	f000 f9e0 	bl	80005e8 <SysTick_vidDelay>
		GPIOG -> BSRRL |= (1 << 13) | (1 << 14);
 8000228:	e7e6      	b.n	80001f8 <main+0xc>
 800022a:	bf00      	nop
 800022c:	40021800 	.word	0x40021800

08000230 <gpio_init>:
	//Lab1_vidMain();
}


void gpio_init(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	/* @note: minimal gpio configuratios are used */
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000234:	4a08      	ldr	r2, [pc, #32]	; (8000258 <gpio_init+0x28>)
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <gpio_init+0x28>)
 8000238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOG -> MODER |= (GPIO_MODER_MODER13_0) | (GPIO_MODER_MODER14_0);
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <gpio_init+0x2c>)
 8000242:	4b06      	ldr	r3, [pc, #24]	; (800025c <gpio_init+0x2c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 53a0 	orr.w	r3, r3, #335544320	; 0x14000000
 800024a:	6013      	str	r3, [r2, #0]

}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800
 800025c:	40021800 	.word	0x40021800
 8000260:	0800073c 	.word	0x0800073c
 8000264:	20000000 	.word	0x20000000
 8000268:	20000018 	.word	0x20000018
 800026c:	20000018 	.word	0x20000018
 8000270:	20000038 	.word	0x20000038

08000274 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000278:	4a16      	ldr	r2, [pc, #88]	; (80002d4 <SystemInit+0x60>)
 800027a:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <SystemInit+0x60>)
 800027c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <SystemInit+0x64>)
 800028a:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <SystemInit+0x64>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <SystemInit+0x64>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800029a:	4a0f      	ldr	r2, [pc, #60]	; (80002d8 <SystemInit+0x64>)
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <SystemInit+0x64>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <SystemInit+0x64>)
 80002ac:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <SystemInit+0x68>)
 80002ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002b0:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <SystemInit+0x64>)
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <SystemInit+0x64>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <SystemInit+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80002c2:	f000 f889 	bl	80003d8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <SystemInit+0x60>)
 80002c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002cc:	609a      	str	r2, [r3, #8]
#endif
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	e000ed00 	.word	0xe000ed00
 80002d8:	40023800 	.word	0x40023800
 80002dc:	24003010 	.word	0x24003010

080002e0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b087      	sub	sp, #28
 80002e4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
 80002ee:	2302      	movs	r3, #2
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
 80002f6:	2302      	movs	r3, #2
 80002f8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002fa:	4b32      	ldr	r3, [pc, #200]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f003 030c 	and.w	r3, r3, #12
 8000302:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000304:	693b      	ldr	r3, [r7, #16]
 8000306:	2b04      	cmp	r3, #4
 8000308:	d007      	beq.n	800031a <SystemCoreClockUpdate+0x3a>
 800030a:	2b08      	cmp	r3, #8
 800030c:	d009      	beq.n	8000322 <SystemCoreClockUpdate+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	d13d      	bne.n	800038e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000312:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 8000314:	4a2d      	ldr	r2, [pc, #180]	; (80003cc <SystemCoreClockUpdate+0xec>)
 8000316:	601a      	str	r2, [r3, #0]
      break;
 8000318:	e03d      	b.n	8000396 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800031a:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 800031c:	4a2c      	ldr	r2, [pc, #176]	; (80003d0 <SystemCoreClockUpdate+0xf0>)
 800031e:	601a      	str	r2, [r3, #0]
      break;
 8000320:	e039      	b.n	8000396 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000322:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	0d9b      	lsrs	r3, r3, #22
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000336:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d00c      	beq.n	8000358 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800033e:	4a24      	ldr	r2, [pc, #144]	; (80003d0 <SystemCoreClockUpdate+0xf0>)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	fbb2 f3f3 	udiv	r3, r2, r3
 8000346:	4a1f      	ldr	r2, [pc, #124]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000348:	6852      	ldr	r2, [r2, #4]
 800034a:	0992      	lsrs	r2, r2, #6
 800034c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000350:	fb02 f303 	mul.w	r3, r2, r3
 8000354:	617b      	str	r3, [r7, #20]
 8000356:	e00b      	b.n	8000370 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000358:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <SystemCoreClockUpdate+0xec>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000360:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000362:	6852      	ldr	r2, [r2, #4]
 8000364:	0992      	lsrs	r2, r2, #6
 8000366:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800036a:	fb02 f303 	mul.w	r3, r2, r3
 800036e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	0c1b      	lsrs	r3, r3, #16
 8000376:	f003 0303 	and.w	r3, r3, #3
 800037a:	3301      	adds	r3, #1
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000380:	697a      	ldr	r2, [r7, #20]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 800038a:	6013      	str	r3, [r2, #0]
      break;
 800038c:	e003      	b.n	8000396 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 8000390:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <SystemCoreClockUpdate+0xec>)
 8000392:	601a      	str	r2, [r3, #0]
      break;
 8000394:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <SystemCoreClockUpdate+0xe4>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	091b      	lsrs	r3, r3, #4
 800039c:	f003 030f 	and.w	r3, r3, #15
 80003a0:	4a0c      	ldr	r2, [pc, #48]	; (80003d4 <SystemCoreClockUpdate+0xf4>)
 80003a2:	5cd3      	ldrb	r3, [r2, r3]
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	fa22 f303 	lsr.w	r3, r2, r3
 80003b2:	4a05      	ldr	r2, [pc, #20]	; (80003c8 <SystemCoreClockUpdate+0xe8>)
 80003b4:	6013      	str	r3, [r2, #0]
}
 80003b6:	bf00      	nop
 80003b8:	371c      	adds	r7, #28
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40023800 	.word	0x40023800
 80003c8:	20000004 	.word	0x20000004
 80003cc:	00f42400 	.word	0x00f42400
 80003d0:	0aba9500 	.word	0x0aba9500
 80003d4:	20000008 	.word	0x20000008

080003d8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	2300      	movs	r3, #0
 80003e4:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003e6:	4a36      	ldr	r2, [pc, #216]	; (80004c0 <SetSysClock+0xe8>)
 80003e8:	4b35      	ldr	r3, [pc, #212]	; (80004c0 <SetSysClock+0xe8>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003f0:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003f2:	4b33      	ldr	r3, [pc, #204]	; (80004c0 <SetSysClock+0xe8>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d103      	bne.n	8000410 <SetSysClock+0x38>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800040e:	d1f0      	bne.n	80003f2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000410:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <SetSysClock+0xe8>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000418:	2b00      	cmp	r3, #0
 800041a:	d002      	beq.n	8000422 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800041c:	2301      	movs	r3, #1
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	e001      	b.n	8000426 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000422:	2300      	movs	r3, #0
 8000424:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d102      	bne.n	8000432 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800042c:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <SetSysClock+0xe8>)
 800042e:	4a25      	ldr	r2, [pc, #148]	; (80004c4 <SetSysClock+0xec>)
 8000430:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000432:	4a23      	ldr	r2, [pc, #140]	; (80004c0 <SetSysClock+0xe8>)
 8000434:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <SetSysClock+0xe8>)
 8000436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800043c:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800043e:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <SetSysClock+0xf0>)
 8000440:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <SetSysClock+0xf0>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000448:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800044a:	4a1d      	ldr	r2, [pc, #116]	; (80004c0 <SetSysClock+0xe8>)
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <SetSysClock+0xe8>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000452:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <SetSysClock+0xe8>)
 8000454:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <SetSysClock+0xe8>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800045c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800045e:	4a18      	ldr	r2, [pc, #96]	; (80004c0 <SetSysClock+0xe8>)
 8000460:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <SetSysClock+0xe8>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000468:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800046a:	4a15      	ldr	r2, [pc, #84]	; (80004c0 <SetSysClock+0xe8>)
 800046c:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <SetSysClock+0xe8>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000474:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000476:	bf00      	nop
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <SetSysClock+0xe8>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0f9      	beq.n	8000478 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <SetSysClock+0xf4>)
 8000486:	f240 7205 	movw	r2, #1797	; 0x705
 800048a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <SetSysClock+0xe8>)
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <SetSysClock+0xe8>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	f023 0303 	bic.w	r3, r3, #3
 8000496:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000498:	4a09      	ldr	r2, [pc, #36]	; (80004c0 <SetSysClock+0xe8>)
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <SetSysClock+0xe8>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	f043 0302 	orr.w	r3, r3, #2
 80004a2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 80004a4:	bf00      	nop
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <SetSysClock+0xe8>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	f003 030c 	and.w	r3, r3, #12
 80004ae:	2b08      	cmp	r3, #8
 80004b0:	d1f9      	bne.n	80004a6 <SetSysClock+0xce>
    {
    }
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40023800 	.word	0x40023800
 80004c4:	07405a08 	.word	0x07405a08
 80004c8:	40007000 	.word	0x40007000
 80004cc:	40023c00 	.word	0x40023c00

080004d0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <HardFault_Handler+0x4>

080004e4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <MemManage_Handler+0x4>

080004ea <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <BusFault_Handler+0x4>

080004f0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <UsageFault_Handler+0x4>

080004f6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
}
 80004fa:	bf00      	nop
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
	SysTick_u32eCounter++;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <SysTick_Handler+0x18>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	4a03      	ldr	r2, [pc, #12]	; (8000538 <SysTick_Handler+0x18>)
 800052c:	6013      	str	r3, [r2, #0]
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000034 	.word	0x20000034

0800053c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	da0b      	bge.n	8000568 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000550:	490d      	ldr	r1, [pc, #52]	; (8000588 <NVIC_SetPriority+0x4c>)
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 030f 	and.w	r3, r3, #15
 8000558:	3b04      	subs	r3, #4
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	0112      	lsls	r2, r2, #4
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	440b      	add	r3, r1
 8000564:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000566:	e009      	b.n	800057c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000568:	4908      	ldr	r1, [pc, #32]	; (800058c <NVIC_SetPriority+0x50>)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	b2d2      	uxtb	r2, r2
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00
 800058c:	e000e100 	.word	0xe000e100

08000590 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3b01      	subs	r3, #1
 800059c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005a0:	d301      	bcc.n	80005a6 <SysTick_Config+0x16>
 80005a2:	2301      	movs	r3, #1
 80005a4:	e00f      	b.n	80005c6 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <SysTick_Config+0x40>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80005ae:	210f      	movs	r1, #15
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
 80005b4:	f7ff ffc2 	bl	800053c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <SysTick_Config+0x40>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <SysTick_Config+0x40>)
 80005c0:	2207      	movs	r2, #7
 80005c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	e000e010 	.word	0xe000e010

080005d4 <SysTick_vidInit>:
volatile VAR(uint32, DATA_CLASS)	SysTick_u32eCounter = 0;



FUNC(void, CODE_FLASH_CLASS)		SysTick_vidInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	SysTick_Config(SysTick_U8PRESCALER);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <SysTick_vidInit+0x10>)
 80005da:	f7ff ffd9 	bl	8000590 <SysTick_Config>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	0002bf20 	.word	0x0002bf20

080005e8 <SysTick_vidDelay>:



FUNC(void, CODE_FLASH_CLASS)		SysTick_vidDelay(
											VAR(uint32,AUTOMATIC)	u32Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	VAR(uint32, AUTOMARIC)	u32LocalCurrTick;
	u32LocalCurrTick = SysTick_u32GetCurrentTick();
 80005f0:	f000 f810 	bl	8000614 <SysTick_u32GetCurrentTick>
 80005f4:	60f8      	str	r0, [r7, #12]

	while( ( SysTick_u32eCounter - u32LocalCurrTick ) < (u32Delay));
 80005f6:	bf00      	nop
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <SysTick_vidDelay+0x28>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	1ad2      	subs	r2, r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	429a      	cmp	r2, r3
 8000604:	d3f8      	bcc.n	80005f8 <SysTick_vidDelay+0x10>
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000034 	.word	0x20000034

08000614 <SysTick_u32GetCurrentTick>:



FUNC(uint32, CODE_FLASH_CLASS)	SysTick_u32GetCurrentTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	return (SysTick_u32eCounter);
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <SysTick_u32GetCurrentTick+0x14>)
 800061a:	681b      	ldr	r3, [r3, #0]
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000034 	.word	0x20000034

0800062c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800062c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000664 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000630:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000632:	e003      	b.n	800063c <LoopCopyDataInit>

08000634 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000636:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000638:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800063a:	3104      	adds	r1, #4

0800063c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000640:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000642:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000644:	d3f6      	bcc.n	8000634 <CopyDataInit>
  ldr  r2, =_sbss
 8000646:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000648:	e002      	b.n	8000650 <LoopFillZerobss>

0800064a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800064a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800064c:	f842 3b04 	str.w	r3, [r2], #4

08000650 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000652:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000654:	d3f9      	bcc.n	800064a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000656:	f7ff fe0d 	bl	8000274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065a:	f000 f811 	bl	8000680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800065e:	f7ff fdc5 	bl	80001ec <main>
  bx  lr    
 8000662:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000664:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000668:	0800073c 	.word	0x0800073c
  ldr  r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000670:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000674:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000678:	20000038 	.word	0x20000038

0800067c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC_IRQHandler>
	...

08000680 <__libc_init_array>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4e0d      	ldr	r6, [pc, #52]	; (80006b8 <__libc_init_array+0x38>)
 8000684:	4c0d      	ldr	r4, [pc, #52]	; (80006bc <__libc_init_array+0x3c>)
 8000686:	1ba4      	subs	r4, r4, r6
 8000688:	10a4      	asrs	r4, r4, #2
 800068a:	2500      	movs	r5, #0
 800068c:	42a5      	cmp	r5, r4
 800068e:	d109      	bne.n	80006a4 <__libc_init_array+0x24>
 8000690:	4e0b      	ldr	r6, [pc, #44]	; (80006c0 <__libc_init_array+0x40>)
 8000692:	4c0c      	ldr	r4, [pc, #48]	; (80006c4 <__libc_init_array+0x44>)
 8000694:	f000 f81a 	bl	80006cc <_init>
 8000698:	1ba4      	subs	r4, r4, r6
 800069a:	10a4      	asrs	r4, r4, #2
 800069c:	2500      	movs	r5, #0
 800069e:	42a5      	cmp	r5, r4
 80006a0:	d105      	bne.n	80006ae <__libc_init_array+0x2e>
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006a8:	4798      	blx	r3
 80006aa:	3501      	adds	r5, #1
 80006ac:	e7ee      	b.n	800068c <__libc_init_array+0xc>
 80006ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006b2:	4798      	blx	r3
 80006b4:	3501      	adds	r5, #1
 80006b6:	e7f2      	b.n	800069e <__libc_init_array+0x1e>
 80006b8:	08000734 	.word	0x08000734
 80006bc:	08000734 	.word	0x08000734
 80006c0:	08000734 	.word	0x08000734
 80006c4:	08000738 	.word	0x08000738

080006c8 <__EH_FRAME_BEGIN__>:
 80006c8:	00000000                                ....

080006cc <_init>:
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ce:	bf00      	nop
 80006d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d2:	bc08      	pop	{r3}
 80006d4:	469e      	mov	lr, r3
 80006d6:	4770      	bx	lr

080006d8 <_fini>:
 80006d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006da:	bf00      	nop
 80006dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006de:	bc08      	pop	{r3}
 80006e0:	469e      	mov	lr, r3
 80006e2:	4770      	bx	lr
